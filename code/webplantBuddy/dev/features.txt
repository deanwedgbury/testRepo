Features: For each feature you implement, move to the Implemented section and
explain who did it (utorid) and how you did it. You can consider these as 
almost user stories, if you just add a bit to them. Add more features/user stories at the bottom.
Move them up when completed.

------------------------------------------------------------------------------------
Implemented: 
------------------------------------------------------------------------------------
0) Login
   Done by: arnold
   Explanation: created schema, including appuser table, populated with 
   default user. Also created handler for login state as well as login page.

01) User never votes twice on the same pair
    Done by: auyeun31
    Explanation: We created an extra table that keeps track of what users have voted on previously. We have a carefully crafted SQL query that makes sure to not return a pair of restaurants that a user has voted on before.

02) Page token: Reload button does not cause incorrect vote, that is reload presents
   expired message and new page presented
    Done by: dinghaoy
    Explanation: We do not present an expired message, but reloading will not cause an incorrect vote. We implemented a page token on every submission, and we check on it to make sure reloading does not cause incorrect votes. A new page is presented.

03) Page token: Back button not allowed, that is old submission prevented
    Done by: auyeun31
    Explanation: The back button is not allowed, the token fix from earlier will also fix this problem.

04) Excellent use of MVC
    Done by: dinghaoy
    Explanation: index.php is the control with the fsm, all the views are in the view folder, and the models in the model folder. The view does no calculations of any sort, simply just displaying output to the user. The model does all the calculation, and the control simply controls where to go next.

05) Insecure direct object references prevented, don't need object id's on the page
    Done by: auyeun31
    Explanation: The use of buttons doesn't allow the user to directly reference the objects.

06) Good schema
    Done by: dinghaoy
    Explanation: We use three tables, one for the user data, one for the restaurants and one for what users have voted on.

07) Summary screen presents list of restaurants and their current ranking
    Done by: auyeun31
    Explanation: Our results.php does the summary screen and even more stats.

09) Summary screen automatically updates every once in a while.
    Done by: dinghaoy
    Explanation: We made the summary screen refresh every 30 seconds

10) Good implementation of navigation in the controller.
    Done by: auyeun31
    Explanation: index.php is our controller, it merely directs us where to go.

14) Good use of HTML5 form fields for form validation.
    Done by: dinghaoy
    Explanation: We use HTML5 pattern in the form field to make sure the user is inputting proper input.

16) Good use of sql
    Done by: auyeun31
    Explanation: Yes. We have a carefully crafted SQL query that returns a random pair of restaurants that have not been voted on by the user before, and their elo is within 48 of each other.

17) Wins vs losses vs ties on results page
    Done by: dinghaoy
    Explanation: We display this in the summary screen, results.php

18) Navigation highlights which page they are on
    Done by: auyeun31
    Explanation: We do styling to highlight and change the box colour, and bold the text.

20) Add in option for tie or ‘I don’t know’ instead of just one wins etc.
    Done by: dinghaoy
    Explanation: Added a tie option in the compete section

21) Smarter choice of pairs, so for example, restaurants compete with ‘closely rated’ other restaurants. (Is this better?)
    Done by: auyeun31
    Explanation: Our SQL query makes sure the restaurants are within 48 elo of each other, which is 3 times the k factor.

22) Good use of session
    Done by: dinghaoy
    Explanation: We store only the important things needed in the session.

08) Summary screen presents some notion of velocity for each restaurant, for example
   velocity over the past few ratings, velocity over the past few minutes.
   Users see which restaurants are moving in the ratings fastest.
    Done by: auyeun31
    Explanation: velocity is implemented in ratings, it shows only the top and bottom 3 velocity changes


11) User profile has lots of interesting inputs
    Done by: dinghaoy
    Explanation: YEs, we also keep phone number, location, gender, age etc..

12) Invalid form submission triggers page reload with form still filled in
    as well as good error messages.
    Done by: auyeun31
    Explanation: yes, when forms are submitted we delived a error message if not everything is filled.

13) All user inputs whitelisted on the backend, whether checked on the front
    or not.
    Done by: dinghaoy
    Explanation: yes, we used htmlspecialchars

15) User profile can be visited for the first time (on registration),
    on error, and on update in which case it is pre-loaded with
    appropriate fields.
    Done by: auyeun31
    Explanation: User can make a profile and update it anytime they wish, when updating it is filled with pre filled values.

19) Require user to answer 10 (for example) before they can see results
    Done by: auyeun31
    Explanation: User can access result page but cannot see result data.


23) Good use of transactions as appropriate. Note: You can put a begin/commit block in a try/catch to simplify transaction exception handling. 
    Done by: dinghaoy
    Explanation: yes

25) Description: password encrypted 
    Done by: auyeun31
    Explanation: encrypted the passwords in the database using md5
